//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using DanmakuEngine.Core;

public class HysteriaDropHandler : DropHandler
{
	public int point;
	public int power;
	public bool life;
	public float dropRadius;

	public override void Drop (Vector3 location)
	{
		int pointTotal = point;
		int powerTotal = power;
		for(powerTotal = power; powerTotal >= 20; powerTotal -= 20)
		{
			SpawnPickup(Pickup.Type.BigPower);
		}
		Debug.Log (powerTotal);
		for(; powerTotal > 0; powerTotal--)
		{
			SpawnPickup(Pickup.Type.Power);
		}
		for(pointTotal = point; pointTotal >= 20; pointTotal -= 20)
		{
			SpawnPickup(Pickup.Type.BigPoint);
		}
		for(; powerTotal > 0; powerTotal--)
		{
			SpawnPickup(Pickup.Type.Point);
		}
		if(life)
		{
			PickupPool.Spawn(Transform.position, Pickup.Type.Life);
		}
	}

	public void SpawnPickup(Pickup.Type type)
	{
		float angle = 2 * Mathf.PI * UnityEngine.Random.value;
		float distance = dropRadius * UnityEngine.Random.value;
		PickupPool.Spawn(new Vector3(Transform.position.x + Mathf.Cos(angle) * distance, Transform.position.y + Mathf.Sin(angle) * distance), type).GameObject.SetActive(true);
	}
}

